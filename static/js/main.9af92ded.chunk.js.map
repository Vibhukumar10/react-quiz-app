{"version":3,"sources":["API/API.ts","API/utils.ts","components/QuestionCard/QuestionCard.styles.ts","components/QuestionCard/QuestionCard.tsx","iconComponents/SvgLoader.tsx","components/StartButton/StartButton.styles.ts","components/StartButton/StartButton.tsx","components/Category/Category.styles.ts","components/Category/Category.tsx","components/FinalScore/FinalScore.styles.ts","components/FinalScore/FinalScore.tsx","components/Header/Header.styles.ts","components/Header/Header.tsx","App/App.styles.ts","App/App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","category","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","CardCSS","styled","div","ButtonWrapper","correct","userClicked","answered","QuestionCard","score","totalQ","nextCallback","answer","callback","userAnswer","questionNr","totalQuestions","checked","finishCallback","className","dangerouslySetInnerHTML","__html","onClick","style","color","correctAnswer","disabled","value","SvgSvgLoader","props","xmlns","viewBox","width","height","fill","stroke","strokeWidth","cx","cy","r","opacity","attributeName","dur","type","from","to","repeatCount","StartCSS","StartButton","CatCSS","Category","catDis","foundCat","ScoreCSS","FinalScore","HeaderCSS","Header","heading","GlobalStyle","createGlobalStyle","TOTAL_QUESTIONS","App","useState","loading","setloading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","setScore","gameOver","setGameOver","setAnswered","finished","setFinished","setChecked","setCatDis","cat","setCat","startTrivia","EASY","newQuestions","e","currentTarget","marginTop","display","justifyContent","alignItems","undefined","prev","answerObject","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIAWYA,E,wFAAAA,K,YAAAA,E,gBAAAA,E,aAAAA,M,KAiBL,I,IAAMC,EAAkB,uCAAG,WAChCC,EACAC,EACAC,GAHgC,iBAAAC,EAAA,6DAK1BC,EAL0B,6CAKuBJ,EALvB,qBAK0CC,EAL1C,uBAKiEC,EALjE,4BAMNG,MAAMD,GANA,8BAMWE,OANX,cAM1BC,EAN0B,yBAOzBA,EAAKC,QAAQC,KAAI,SAACC,GAAD,mBAAC,eACpBA,GADmB,IAEtBC,SCrCyBC,EDqCH,GAAD,mBAChBF,EAASG,mBADO,CAEnBH,EAASI,iBCtCb,YAAIF,GAAOG,MAAK,kBAAMC,KAAKC,SAAW,SADZ,IAACL,MD4BK,2CAAH,0D,+BEpBlBM,EAAUC,IAAOC,IAAV,w7FA6JPC,EAAgBF,IAAOC,IAAV,2kBAUZ,gBAAGE,EAAH,EAAGA,QAASC,EAAZ,EAAYA,YAAZ,OACRD,EACI,mBACCA,GAAWC,EACZ,gBACA,oBAEO,gBAAGC,EAAH,EAAGA,SAAUF,EAAb,EAAaA,QAASC,EAAtB,EAAsBA,YAAtB,OACXC,IAAaD,GAAeD,GAAW,OAAS,YAEzC,gBAAGE,EAAH,EAAGA,SAAUF,EAAb,EAAaA,QAASC,EAAtB,EAAsBA,YAAtB,OACPC,IAAaD,GAAeD,GAAW,OAAS,MAEpC,gBAAGA,EAAH,EAAGA,QAASC,EAAZ,EAAYA,YAAZ,OACZD,EACI,cACCA,GAAWC,EACZ,UACA,iBAIQ,qBAAGC,UAA4B,e,OC/GlCC,EAjEuB,SAAC,GAAD,IACpCC,EADoC,EACpCA,MACAC,EAFoC,EAEpCA,OACAC,EAHoC,EAGpCA,aACAlB,EAJoC,EAIpCA,SACAmB,EALoC,EAKpCA,OACAC,EANoC,EAMpCA,SACAC,EAPoC,EAOpCA,WACAC,EARoC,EAQpCA,WACAC,EAToC,EASpCA,eACAC,EAVoC,EAUpCA,QACAC,EAXoC,EAWpCA,eAXoC,OAapC,cAACjB,EAAD,UACE,sBAAKkB,UAAU,YAAf,UACE,sBAAKA,UAAU,aAAf,UACE,sBAAKA,UAAU,kBAAf,uBACaJ,EADb,MAC4BC,KAE5B,sBAAKG,UAAU,QAAf,oBACUV,EADV,MACoBC,QAGtB,sBAAKS,UAAU,OAAf,UACE,sBAAKA,UAAU,WAAf,UACE,qBAAKC,wBAAyB,CAAEC,OAAQ5B,KACvCwB,GAAWF,IAAeL,GACzB,qBAAKS,UAAU,OAAf,SACE,wBAAQG,QAASX,EAAjB,SACE,cAAC,IAAD,CAAqBY,MAAO,CAAEC,MAAO,eAK1CP,GAAWF,IAAeL,GACzB,qBAAKS,UAAU,SAAf,SACE,wBAAQG,QAASJ,EAAjB,yBAIN,qBAAKC,UAAU,UAAf,SACGP,EAAOpB,KAAI,SAACoB,GAAD,OACV,cAACR,EAAD,CACEe,UAAU,mBAEVd,SAAmB,OAAVS,QAAU,IAAVA,OAAA,EAAAA,EAAYW,iBAAkBb,EACvCN,aAAuB,OAAVQ,QAAU,IAAVA,OAAA,EAAAA,EAAYF,UAAWA,EACpCL,SAAUU,EALZ,SAOE,wBACEE,UAAU,aACVO,WAAUZ,EACVa,MAAOf,EACPU,QAAST,EAJX,SAME,sBAAMO,wBAAyB,CAAEC,OAAQT,QAXtCA,iBC/BJgB,I,YAAAA,EAhCf,SAAsBC,GACpB,OACE,8CACEC,MAAM,6BACNC,QAAQ,cACRC,MAAM,SACNC,OAAO,UACHJ,GALN,cAOE,wBACEK,KAAK,OACLC,OAAO,OACPC,YAAa,EACbC,GAAI,GACJC,GAAI,GACJC,EAAG,GACHC,QAAS,KAEX,wBAAQN,KAAK,OAAOC,OAAO,UAAUC,YAAa,EAAGC,GAAI,EAAGC,GAAI,GAAIC,EAAG,EAAvE,SACE,kCACEE,cAAc,YACdC,IAAI,KACJC,KAAK,SACLC,KAAK,UACLC,GAAG,YACHC,YAAY,sBCzBTC,EAAW7C,IAAOC,IAAV,6kDCMR6C,EAA+B,SAAC,GAAD,IAAGzC,EAAH,EAAGA,SAAUM,EAAb,EAAaA,SAAb,OAC1C,cAACkC,EAAD,UACE,qBAAK5B,UAAU,SAAf,SACE,wBAAQA,UAAU,gBAAgBG,QAAST,EAA3C,SACGN,EAAW,aAAe,cCNtB0C,EAAS/C,IAAOC,IAAV,gkBAiCNC,EAAgBF,IAAOC,IAAV,6hBCEX+C,EAhCmB,SAAC,GAAD,IAAGlE,EAAH,EAAGA,SAAU6B,EAAb,EAAaA,SAAUsC,EAAvB,EAAuBA,OAAvB,OAChC,cAACF,EAAD,UACE,qBAAK9B,UAAU,YAAf,SACGnC,EAASQ,KAAI,SAAC4D,GAAD,OACZ,cAAC,EAAD,CAA8BjC,UAAU,UAAUgC,OAAQA,EAA1D,SACE,wBACE7B,QAAST,EACTa,WAAUyB,EACVxB,MACe,WAAbyB,EACI,KACa,cAAbA,EACA,KACa,sBAAbA,EACA,IACa,UAAbA,EACA,KACa,cAAbA,EACA,KACa,aAAbA,EACA,KACA,GAhBR,SAmBE,sBAAMhC,wBAAyB,CAAEC,OAAQ+B,QApBzBA,WCXfC,EAAWnD,IAAOC,IAAV,yiBCkBNmD,EAZqB,SAAC,GAAD,IAAG7C,EAAH,EAAGA,MAAOC,EAAV,EAAUA,OAAV,OAClC,cAAC2C,EAAD,UACE,qBAAKlC,UAAU,YAAf,SACE,qBAAKA,UAAU,SAAf,SACE,iDACkBV,EADlB,IAC0BC,YCXrB6C,EAAYrD,IAAOC,IAAV,+hBCWPqD,EANiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAC9B,cAACF,EAAD,UACE,oBAAIpC,UAAU,SAAd,SAAwBsC,OCPfC,EAAcC,YAAH,62BCoBlB3E,EAAW,CACf,oBACA,SACA,YACA,YACA,QACA,YAGI4E,EAAkB,GAiJTC,MA/If,WAEE,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,mBAA2B,IAA7D,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA4BJ,mBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAsCN,mBAAyB,IAA/D,mBAAOO,EAAP,KAAoBC,EAApB,KACA,EAA0BR,mBAAS,GAAnC,mBAAOrD,EAAP,KAAc8D,EAAd,KACA,EAAgCT,oBAAS,GAAzC,mBAAOU,EAAP,KAAiBC,EAAjB,KACA,EAAgCX,mBAAS,GAAzC,mBAAOvD,EAAP,KAAiBmE,EAAjB,KACA,EAAgCZ,oBAAS,GAAzC,mBAAOa,EAAP,KAAiBC,EAAjB,KACA,EAA8Bd,oBAAS,GAAvC,mBAAO7C,EAAP,KAAgB4D,EAAhB,KACA,EAA4Bf,oBAAS,GAArC,oBAAOX,GAAP,MAAe2B,GAAf,MACA,GAAsBhB,mBAAS,IAA/B,qBAAOiB,GAAP,MAAYC,GAAZ,MAGMC,GAAW,uCAAG,4BAAA/F,EAAA,6DAClB8E,GAAW,GACXS,GAAY,GACZH,EAAe,IACfI,EAAY,GACZE,GAAY,GACZC,GAAW,GACXC,IAAU,GAPQ,SASShG,EACzB8E,EACAmB,GACAlG,EAAWqG,MAZK,OASZC,EATY,OAelBjB,EAAaiB,GACbZ,EAAS,GACTH,EAAU,GACVJ,GAAW,GAlBO,4CAAH,qDAqEjB,OACE,qCACE,cAACN,EAAD,IACA,sBAAKvC,UAAU,MAAf,UACE,cAAC,EAAD,CAAQsC,QAAS,mBAIhBkB,GAAY,cAAC,EAAD,CAAYlE,MAAOA,EAAOC,OAAQkD,IAI/C,cAAC,EAAD,CAAU5E,SAAUA,EAAU6B,SAnBjB,SAACuE,GAClBN,IAAU,GACV,IAAMC,EAAMK,EAAEC,cAAc1D,MAC5BqD,GAAOD,IAgBiD5B,OAAQA,KAI3DqB,GAAYG,EACX,cAAC,EAAD,CACE9D,SAAUoE,GACV1E,SAAUA,IAAaqD,IAEvB,KAGHG,GACC,qBACExC,MAAO,CACL+D,UAAW,OACXC,QAAS,OACTC,eAAgB,SAChBC,WAAY,UALhB,SAQE,cAAC,EAAD,OAMF1B,IAAYS,IAAaG,GACzB,cAAC,EAAD,CACElE,MAAOA,EACPC,OAAQkD,EACR7C,WAAYoD,EAAS,EACrBnD,eAAgB4C,EAChBnE,SAAUwE,EAAUE,GAAQ1E,SAC5BmB,OAAQqD,EAAUE,GAAQzE,QAC1BoB,WAAYuD,EAAcA,EAAYF,QAAUuB,EAChD7E,SAhGU,SAACuE,GACnB,IAAKZ,EAAU,CACbK,GAAW,GACX,IAAMjE,EAASwE,EAAEC,cAAc1D,MAEzBtB,EAAU4D,EAAUE,GAAQtE,iBAAmBe,EAEjDP,GACFkE,GAAS,SAACoB,GAAD,OAAUA,EAAO,KAG5B,IAAMC,EAAe,CACnBnG,SAAUwE,EAAUE,GAAQ1E,SAC5BmB,SACAP,UACAoB,cAAewC,EAAUE,GAAQtE,gBAGnCyE,GAAe,SAACqB,GAAD,4BAAcA,GAAd,CAAoBC,OACnClB,GAAY,SAACiB,GAAD,OAAUA,EAAO,OA8EvBhF,aA1EW,WAEnB,IAAMkF,EAAe1B,EAAS,EAC9BU,GAAW,GAEPgB,IAAiBjC,EACnBa,GAAY,GAEZL,EAAUyB,IAmEJ5E,QAASA,EACTC,eAhES,WACjB0D,GAAY,GACZE,IAAU,GACVE,GAAO,cCvGXc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9af92ded.chunk.js","sourcesContent":["import { shuffleArray } from \"./utils\";\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n};\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\",\r\n}\r\n\r\n// export enum Categories {\r\n//   SPORTS = \"21\",\r\n//   COMPUTER = \"18\",\r\n//   GK = \"9\",\r\n//   MUSIC = \"12\",\r\n//   GEOGRAPHY = \"22\",\r\n//   VEHICLES = \"28\",\r\n// }\r\n\r\nexport type QuestionsState = Question & { answers: string[] };\r\n\r\nexport const fetchQuizQuestions = async (\r\n  amount: number,\r\n  category: string,\r\n  difficulty: Difficulty\r\n): Promise<QuestionsState[]> => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&category=${category}&difficulty=${difficulty}&type=multiple&`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([\r\n      ...question.incorrect_answers,\r\n      question.correct_answer,\r\n    ]),\r\n  }));\r\n};\r\n","export const shuffleArray = (array: any[]) =>\r\n  [...array].sort(() => Math.random() - 0.5);\r\n","import styled from \"styled-components\";\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n  answered: boolean;\r\n};\r\n\r\nexport const CardCSS = styled.div`\r\n  .container {\r\n    background-color: #ffffff;\r\n    /*background-image: url(\"https://www.transparenttextures.com/patterns/worn-dots.png\");*/\r\n    /* This is mostly intended for prototyping; please download the pattern and re-host for production environments. Thank you! */\r\n    padding: 1rem 3em 2rem;\r\n    border-radius: 75px;\r\n    box-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px,\r\n      rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px,\r\n      rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;\r\n  }\r\n\r\n  .status-bar {\r\n    padding: 0 2rem;\r\n    font-size: 1rem;\r\n    font-family: \"Roboto Mono\", monospace;\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .quiz {\r\n    height: 225px;\r\n    margin-top: 20px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .question {\r\n    padding: 20px 0;\r\n    width: 275px;\r\n    text-align: left;\r\n    font-size: 20px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .options {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-evenly;\r\n  }\r\n\r\n  .next {\r\n    button {\r\n      border: 2px solid #111;\r\n      background: transparent;\r\n      height: 50px;\r\n      width: 50px;\r\n      border-radius: 100%;\r\n    }\r\n\r\n    button:hover {\r\n      background: lightgreen;\r\n      color: white;\r\n      transition: 0.5s;\r\n    }\r\n  }\r\n\r\n  .finish {\r\n    button {\r\n      background: transparent;\r\n      border: 2px solid #111;\r\n      height: 35px;\r\n      width: 100px;\r\n      border-radius: 10px;\r\n      font-size: 1rem;\r\n      font-family: \"Roboto Mono\", monospace;\r\n    }\r\n    button:hover {\r\n      background: lightgreen;\r\n      color: white;\r\n      transition: 0.5s;\r\n    }\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    .container {\r\n      width: 350px;\r\n      height: 500px;\r\n    }\r\n\r\n    .quiz {\r\n      flex-wrap: wrap;\r\n      justify-content: center;\r\n    }\r\n\r\n    .next {\r\n      position: absolute;\r\n      bottom: 210px;\r\n      right: 237.5px;\r\n    }\r\n\r\n    .finish {\r\n      position: absolute;\r\n      bottom: 210px;\r\n      right: 210px;\r\n    }\r\n\r\n    .options {\r\n      width: 100%;\r\n      height: 250px;\r\n    }\r\n\r\n    .question {\r\n      width: 100%;\r\n      height: 80px;\r\n    }\r\n\r\n    .status-bar {\r\n      padding: 0 4px;\r\n      margin-top: 20px;\r\n    }\r\n  }\r\n\r\n  @media (max-width: 500px) {\r\n    .container {\r\n      width: 200px;\r\n      height: 420px;\r\n    }\r\n\r\n    .quiz {\r\n      flex-wrap: wrap;\r\n      justify-content: center;\r\n    }\r\n\r\n    .next {\r\n      position: absolute;\r\n      bottom: 50px;\r\n      right: 166px;\r\n    }\r\n\r\n    .finish {\r\n      position: absolute;\r\n      bottom: 57px;\r\n      right: 140px;\r\n    }\r\n\r\n    .options {\r\n      width: 100%;\r\n      height: 225px;\r\n    }\r\n\r\n    .question {\r\n      font-size: 15px;\r\n      width: 100%;\r\n      height: 70px;\r\n    }\r\n\r\n    .status-bar {\r\n      text-decoration: underline;\r\n      font-size: 0.6rem;\r\n      margin-top: 10px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  button {\r\n    text-align: left;\r\n    width: 300px;\r\n    height: 50px;\r\n    font-family: Montserrat, sans-serif;\r\n    background: transparent;\r\n    border-radius: 20px;\r\n    font-size: 0.9rem;\r\n    padding-left: 20px;\r\n    border: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? \"2px solid green\"\r\n        : !correct && userClicked\r\n        ? \"2px solid red\"\r\n        : \"2px solid #000\"};\r\n\r\n    font-size: ${({ answered, correct, userClicked }) =>\r\n      answered && (userClicked || correct) ? \"1rem\" : \"0.9rem\"};\r\n\r\n    color: ${({ answered, correct, userClicked }) =>\r\n      answered && (userClicked || correct) ? \"#111\" : \"\"};\r\n\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? \"lightgreen\"\r\n        : !correct && userClicked\r\n        ? \"#E98580\"\r\n        : \"transparent\"};\r\n  }\r\n\r\n  button:hover {\r\n    background: ${({ answered }) => !answered && \"lightblue\"};\r\n    transition: 0.5s;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    button {\r\n      width: 100%;\r\n    }\r\n  }\r\n  @media (max-width: 500px) {\r\n    button {\r\n      width: 100%;\r\n      font-size: 12px;\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\n//types\r\nimport { AnswerObject } from \"../../App/App\";\r\n//styles\r\nimport { CardCSS, ButtonWrapper } from \"./QuestionCard.styles\";\r\n\r\ntype props = {\r\n  score: number;\r\n  totalQ: number;\r\n  question: string;\r\n  answer: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  nextCallback: () => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNr: number;\r\n  totalQuestions: number;\r\n  checked: boolean;\r\n  finishCallback: () => void;\r\n};\r\n\r\nconst QuestionCard: React.FC<props> = ({\r\n  score,\r\n  totalQ,\r\n  nextCallback,\r\n  question,\r\n  answer,\r\n  callback,\r\n  userAnswer,\r\n  questionNr,\r\n  totalQuestions,\r\n  checked,\r\n  finishCallback,\r\n}) => (\r\n  <CardCSS>\r\n    <div className=\"container\">\r\n      <div className=\"status-bar\">\r\n        <div className=\"question-number\">\r\n          Question: {questionNr} / {totalQuestions}\r\n        </div>\r\n        <div className=\"score\">\r\n          Score: {score} / {totalQ}\r\n        </div>\r\n      </div>\r\n      <div className=\"quiz\">\r\n        <div className=\"question\">\r\n          <div dangerouslySetInnerHTML={{ __html: question }} />\r\n          {checked && questionNr !== totalQ && (\r\n            <div className=\"next\">\r\n              <button onClick={nextCallback}>\r\n                <ArrowForwardIosIcon style={{ color: \"black\" }} />\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n          {checked && questionNr === totalQ && (\r\n            <div className=\"finish\">\r\n              <button onClick={finishCallback}>Finish</button>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"options\">\r\n          {answer.map((answer) => (\r\n            <ButtonWrapper\r\n              className=\"option-container\"\r\n              key={answer}\r\n              correct={userAnswer?.correctAnswer === answer}\r\n              userClicked={userAnswer?.answer === answer}\r\n              answered={checked}\r\n            >\r\n              <button\r\n                className=\"option-btn\"\r\n                disabled={userAnswer ? true : false}\r\n                value={answer}\r\n                onClick={callback}\r\n              >\r\n                <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n              </button>\r\n            </ButtonWrapper>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </CardCSS>\r\n);\r\n\r\nexport default QuestionCard;\r\n","import * as React from \"react\";\n\nfunction SvgSvgLoader(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 100 100\"\n      width=\"7.5rem\"\n      height=\"7.5rem\"\n      {...props}\n    >\n      <circle\n        fill=\"none\"\n        stroke=\"#fff\"\n        strokeWidth={4}\n        cx={50}\n        cy={50}\n        r={44}\n        opacity={0.5}\n      />\n      <circle fill=\"#fff\" stroke=\"#e74c3c\" strokeWidth={3} cx={8} cy={54} r={6}>\n        <animateTransform\n          attributeName=\"transform\"\n          dur=\"2s\"\n          type=\"rotate\"\n          from=\"0 50 48\"\n          to=\"360 50 52\"\n          repeatCount=\"indefinite\"\n        />\n      </circle>\n    </svg>\n  );\n}\n\nexport default SvgSvgLoader;\n","import styled from \"styled-components\";\r\n\r\nexport const StartCSS = styled.div`\r\n  .button {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n\r\n  .glow-on-hover {\r\n    margin-top: 25px;\r\n    font-family: \"Roboto Mono\", monospace;\r\n    font-weight: 500;\r\n    font-size: 2rem;\r\n    width: 220px;\r\n    height: 50px;\r\n    border: none;\r\n    outline: none;\r\n    color: #000;\r\n    background: #fff;\r\n    cursor: pointer;\r\n    position: relative;\r\n    z-index: 0;\r\n    border-radius: 10px;\r\n  }\r\n\r\n  .glow-on-hover:before {\r\n    content: \"\";\r\n    background: linear-gradient(\r\n      45deg,\r\n      #ff0000,\r\n      #ff7300,\r\n      #fffb00,\r\n      #48ff00,\r\n      #00ffd5,\r\n      #002bff,\r\n      #7a00ff,\r\n      #ff00c8,\r\n      #ff0000\r\n    );\r\n    position: absolute;\r\n    top: -2px;\r\n    left: -2px;\r\n    background-size: 400%;\r\n    z-index: -1;\r\n    filter: blur(5px);\r\n    width: calc(100% + 4px);\r\n    height: calc(100% + 4px);\r\n    animation: glowing 20s linear infinite;\r\n    opacity: 0;\r\n    transition: opacity 0.3s ease-in-out;\r\n    border-radius: 10px;\r\n  }\r\n\r\n  .glow-on-hover:active {\r\n    color: #000;\r\n  }\r\n\r\n  .glow-on-hover:active:after {\r\n    background: transparent;\r\n  }\r\n\r\n  .glow-on-hover:hover:before {\r\n    opacity: 1;\r\n  }\r\n\r\n  .glow-on-hover:after {\r\n    z-index: -1;\r\n    content: \"\";\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: #fff;\r\n    left: 0;\r\n    top: 0;\r\n    border-radius: 10px;\r\n  }\r\n\r\n  @keyframes glowing {\r\n    0% {\r\n      background-position: 0 0;\r\n    }\r\n    50% {\r\n      background-position: 400% 0;\r\n    }\r\n    100% {\r\n      background-position: 0 0;\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { StartCSS } from \"./StartButton.styles\";\r\n\r\ntype props = {\r\n  answered: boolean;\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n};\r\n\r\nexport const StartButton: React.FC<props> = ({ answered, callback }) => (\r\n  <StartCSS>\r\n    <div className=\"button\">\r\n      <button className=\"glow-on-hover\" onClick={callback}>\r\n        {answered ? \"Play Again\" : \"Play\"}\r\n      </button>\r\n    </div>\r\n  </StartCSS>\r\n);\r\n","import styled from \"styled-components\";\r\n\r\ntype ButtonWrapperProps = {\r\n  catDis: boolean;\r\n};\r\n\r\nexport const CatCSS = styled.div`\r\n  .container {\r\n    color: #fff;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-evenly;\r\n    margin: 0 0 20px;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    .container {\r\n      width: 400px;\r\n      flex-wrap: wrap;\r\n      button {\r\n        margin: 0.35rem 0rem;\r\n      }\r\n    }\r\n  }\r\n\r\n  @media (max-width: 500px) {\r\n    .container {\r\n      width: 300px;\r\n      flex-wrap: wrap;\r\n      button {\r\n        font-size: 0.75rem;\r\n        width: 100px;\r\n        height: 45px;\r\n        margin: 0.3rem 0.1rem;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  button {\r\n    color: #fff;\r\n    font-family: \"Montserrat\", sans-serif;\r\n    font-weight: 500;\r\n    text-align: center;\r\n    height: 40px;\r\n    background: transparent;\r\n    border-radius: 20px;\r\n    font-size: 0.9rem;\r\n    padding: 0 10px;\r\n    border: 3px solid #fff;\r\n  }\r\n\r\n  button:disabled,\r\n  button[disabled] {\r\n    border: 3px solid #999999;\r\n    background-color: #cccccc;\r\n    color: #666666;\r\n    cursor: not-allowed;\r\n  }\r\n\r\n  button:hover {\r\n    background: lightblue;\r\n    transition: 0.5s;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { CatCSS, ButtonWrapper } from \"./Category.styles\";\r\n\r\ntype props = {\r\n  category: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  catDis: boolean;\r\n};\r\n\r\nconst Category: React.FC<props> = ({ category, callback, catDis }) => (\r\n  <CatCSS>\r\n    <div className=\"container\">\r\n      {category.map((foundCat) => (\r\n        <ButtonWrapper key={foundCat} className=\"cat-btn\" catDis={catDis}>\r\n          <button\r\n            onClick={callback}\r\n            disabled={catDis ? true : false}\r\n            value={\r\n              foundCat === \"Sports\"\r\n                ? \"21\"\r\n                : foundCat === \"Computers\"\r\n                ? \"18\"\r\n                : foundCat === \"General Knowledge\"\r\n                ? \"9\"\r\n                : foundCat === \"Music\"\r\n                ? \"12\"\r\n                : foundCat === \"Geography\"\r\n                ? \"22\"\r\n                : foundCat === \"Vehicles\"\r\n                ? \"28\"\r\n                : \"\"\r\n            }\r\n          >\r\n            <span dangerouslySetInnerHTML={{ __html: foundCat }} />\r\n          </button>\r\n        </ButtonWrapper>\r\n      ))}\r\n    </div>\r\n  </CatCSS>\r\n);\r\n\r\nexport default Category;\r\n","import styled from \"styled-components\";\r\n\r\nexport const ScoreCSS = styled.div`\r\n  .container {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  .design {\r\n    padding: 0 20px;\r\n  }\r\n\r\n  h1 {\r\n    padding: 10px;\r\n    font-family: roboto mono, sans-serif;\r\n    background: #fff;\r\n    border: 2px dashed #fff;\r\n    border-radius: 20px;\r\n  }\r\n\r\n  @media (max-width: 500px) {\r\n    .container {\r\n      width: 300px;\r\n      margin-bottom: 30px;\r\n    }\r\n\r\n    h1 {\r\n      text-align: center;\r\n      width: 200px;\r\n      font-size: 1rem;\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { ScoreCSS } from \"./FinalScore.styles\";\r\n\r\ntype props = {\r\n  score: number;\r\n  totalQ: number;\r\n};\r\n\r\nconst FinalScore: React.FC<props> = ({ score, totalQ }) => (\r\n  <ScoreCSS>\r\n    <div className=\"container\">\r\n      <div className=\"design\">\r\n        <h1>\r\n          Your Score is: {score}/{totalQ}\r\n        </h1>\r\n      </div>\r\n    </div>\r\n  </ScoreCSS>\r\n);\r\n\r\nexport default FinalScore;\r\n","import styled from \"styled-components\";\r\n\r\nexport const HeaderCSS = styled.div`\r\n  h1 {\r\n    font-family: Montserrat, roboto;\r\n    font-size: 5rem;\r\n    color: #fff;\r\n    border: 2px dashed #fff;\r\n    padding: 0.03em 0.25em;\r\n  }\r\n\r\n  .header {\r\n    margin: 10px auto 25px;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    h1 {\r\n      font-size: 3rem;\r\n    }\r\n    .header {\r\n      width: 400px;\r\n    }\r\n  }\r\n\r\n  @media (max-width: 500px) {\r\n    h1 {\r\n      font-size: 1.9rem;\r\n    }\r\n    .header {\r\n      margin-top: 0;\r\n      text-align: center;\r\n      padding: 4px;\r\n      width: 250px;\r\n    }\r\n  }\r\n`;\r\n","import * as React from \"react\";\r\nimport { HeaderCSS } from \"./Header.styles\";\r\n\r\ntype props = {\r\n  heading: string;\r\n};\r\n\r\nconst Header: React.FC<props> = ({ heading }) => (\r\n  <HeaderCSS>\r\n    <h1 className=\"header\">{heading}</h1>\r\n  </HeaderCSS>\r\n);\r\n\r\nexport default Header;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n\r\n    html {\r\n        height: 100vh;\r\n        width: 100vw;\r\n        background-color: #FBAB7E;\r\n        background-image: linear-gradient(62deg, #FBAB7E 0%, #F7CE68 100%);\r\n        background-color: #FF9A8B;\r\n        background-image: linear-gradient(90deg, #FF9A8B 0%, #FF6A88 55%, #FF99AC 100%);\r\n        background-color: #74EBD5;\r\n        background-image: linear-gradient(90deg, #74EBD5 0%, #9FACE6 100%);\r\n                \r\n        font-family: Montserrat, san-serif;\r\n    }\r\n\r\n    body {\r\n        margin: 50px 0 0;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        user-select: none;\r\n    }\r\n\r\n    button {\r\n        cursor: pointer;\r\n    }\r\n\r\n    @media (max-width: 500px) {\r\n        html {\r\n            background-image: linear-gradient(0deg, #74EBD5 0%, #9FACE6 100%);\r\n        }    \r\n    }\r\n`;\r\n","import React, { useState } from \"react\";\nimport { fetchQuizQuestions } from \"../API/API\";\n//components\nimport QuestionCard from \"../components/QuestionCard/QuestionCard\";\nimport SvgSvgLoader from \"../iconComponents/SvgLoader\";\nimport { StartButton } from \"../components/StartButton/StartButton\";\nimport Category from \"../components/Category/Category\";\nimport FinalScore from \"../components/FinalScore/FinalScore\";\n// import SvgBackgoundSvg from \"./iconComponents/BackgoundSvg\";\nimport Header from \"../components/Header/Header\";\n//types\nimport { QuestionsState, Difficulty } from \"../API/API\";\n//styles\nimport { GlobalStyle } from \"./App.styles\";\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst category = [\n  \"General Knowledge\",\n  \"Sports\",\n  \"Computers\",\n  \"Geography\",\n  \"Music\",\n  \"Vehicles\",\n];\n\nconst TOTAL_QUESTIONS = 10;\n\nfunction App() {\n  //********************useStates**********************\n  const [loading, setloading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionsState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [answered, setAnswered] = useState(0);\n  const [finished, setFinished] = useState(false);\n  const [checked, setChecked] = useState(false);\n  const [catDis, setCatDis] = useState(false);\n  const [cat, setCat] = useState(\"\");\n\n  //********************events*************************\n  const startTrivia = async () => {\n    setloading(true);\n    setGameOver(false);\n    setUserAnswers([]);\n    setAnswered(0);\n    setFinished(false);\n    setChecked(false);\n    setCatDis(true);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      cat,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setNumber(0);\n    setloading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      setChecked(true);\n      const answer = e.currentTarget.value;\n      //check asnwer against the correct answer\n      const correct = questions[number].correct_answer === answer;\n      //add score if answer is correct\n      if (correct) {\n        setScore((prev) => prev + 1);\n      }\n      //save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n\n      setUserAnswers((prev) => [...prev, answerObject]);\n      setAnswered((prev) => prev + 1);\n    }\n  };\n\n  const nextQuestion = () => {\n    //move to the next question if not the last question\n    const nextQuestion = number + 1;\n    setChecked(false);\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  const finishQuiz = () => {\n    setFinished(true);\n    setCatDis(false);\n    setCat(\"\");\n  };\n\n  const disableCat = (e: React.MouseEvent<HTMLButtonElement>) => {\n    setCatDis(true);\n    const cat = e.currentTarget.value;\n    setCat(cat);\n  };\n  //***************************************************\n\n  return (\n    <>\n      <GlobalStyle />\n      <div className=\"App\">\n        <Header heading={\"React-Quiz-App\"} />\n\n        {/* {*************  FinalScore  **************} */}\n\n        {finished && <FinalScore score={score} totalQ={TOTAL_QUESTIONS} />}\n\n        {/* {**************** categories  ******************} */}\n\n        <Category category={category} callback={disableCat} catDis={catDis} />\n\n        {/**********  Start/Restart Button ************/}\n\n        {gameOver || finished ? (\n          <StartButton\n            callback={startTrivia}\n            answered={answered === TOTAL_QUESTIONS ? true : false}\n          />\n        ) : null}\n\n        {/****************  SVG Loader  ******************/}\n        {loading && (\n          <div\n            style={{\n              marginTop: \"80px\",\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <SvgSvgLoader />\n          </div>\n        )}\n\n        {/* {****************  Question Card  ****************} */}\n\n        {!loading && !gameOver && !finished && (\n          <QuestionCard\n            score={score}\n            totalQ={TOTAL_QUESTIONS}\n            questionNr={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answer={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n            nextCallback={nextQuestion}\n            checked={checked}\n            finishCallback={finishQuiz}\n          />\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}